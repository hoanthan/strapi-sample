name: Deploy Production

on:
  push:
    branches:
      - 'main'
  workflow_dispatch:

jobs:
  define_tag:
    environment: preview
    runs-on: ubuntu-latest
    outputs:
      imageUrl: ${{ steps.imageTag.outputs.url }}
      image: ${{ steps.imageTag.outputs.image }}
      tag: ${{ steps.imageTag.outputs.tag }}
    steps:
      - id: hash
        uses: prompt/actions-commit-hash@v3
        with:
          commit: '${{ github.sha }}'
          prefix: ''
      - id: imageTag
        name: Define tag
        run: |
          COMMIT_HASH="${{ steps.hash.outputs.short }}"
          echo $COMMIT_HASH
          echo "url=${{ vars.ECR_REGISTRY }}:latest" >> "$GITHUB_OUTPUT"
          echo "tag=latest" >> "$GITHUB_OUTPUT"
          echo "image=$ECR_REPO_NAME:latest" >> "$GITHUB_OUTPUT"
  build:
    environment: preview
    needs: define_tag
    uses: ./.github/workflows/build.yml
    with:
      env: "production"
      image_tag: ${{ needs.define_tag.outputs.imageUrl }}
      db_secret_id: ${{ vars.DB_SECRET_ID }}
    secrets: inherit
#  deploy:
#    needs: [ define_tag, build ]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET_KEY }}
#          aws-region: ${{ secrets.AWS_REGION }}
#      - name: ECS Update Service
#        run: |
#          aws ecs update-service \
#              --cluster ${{ vars.CLUSTER_NAME }} \
#              --service ${{ vars.SERVICE_NAME }} \
#              --force-new-deployment
#      - name: Download task definition
#        run: |
#          aws ecs describe-task-definition --task-definition ${{ vars.TASK_DEF_NAME }} --query taskDefinition > task-definition.json
#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: task-definition.json
#          container-name: ${{ vars.CONTAINER_NAME }}
#          image: ${{ needs.define_tag.outputs.imageUrl }}
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{ vars.SERVICE_NAME }}
#          cluster: ${{ vars.CLUSTER_NAME }}
#          desired-count: 1
#          force-new-deployment: true
#          wait-for-minutes: 5
#          wait-for-service-stability: true
